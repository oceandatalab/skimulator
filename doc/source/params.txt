# -----------------------#
# Files and directories
# -----------------------#
import os

.. _params-file:

# ------ Directory that contains orbit file:
dir_setup = os.path.join([yourpath], 'skimsimulator', 'data')
# ------ Directory that contains your own inputs:
indatadir = '[yourpath_to_yourdata]/'
# ------ Directory that contains your outputs:
outdatadir = '[yourpath_to_outputs]/'
# ------ Orbit file:
satname = [chosenorbit]
filesat = os.path.join(dir_setup, [chosenorbit])
# ------ Name of the configuration (to build output files names) 
config = [yourconfigname]

# -----------------------# 
# SKIM swath parameters 
# -----------------------# 

.. _params-skimswath:

# ------ Satellite grid file root name:
# 	 (Final file name is root_name_[numberofpass].nc)
filesgrid = os.path.join(outdatadir, '{}_grid'.format(config))
or filesgrid = os.path.join(outdatadir, '[your_grid_root_name]')
# ------ Force the computation of the satellite grid:
makesgrid = True or False
# ------ Give a subdomain if only part of the model is needed:
#	 (modelbox=[lon_min, lon_max, lat_min, lat_max])
# 	 (If modelbox is None, the whole domain of the model is considered)
modelbox =  None or [yourlon_min, yourlon_max, yourlat_min, yourlat_max]
#------- Rotation speed of the antenna (in tr/min)
rotation_speed = 3.396739 or 5.20833
#------- List of position of beams:
list_pos = (0, 72*math.pi/180., 144*math.pi/180., 216*math.pi / 180.,
            288*math.pi/180., 0, math.pi)
#------- List of angle of beams in degrees:
list_angle = (12, 12, 12, 12, 12, 6, 6)
#------- List of timeshift as regard to nadir for 12 degree beams:
list_shift = (1, 2, 4, 5, 7, 3, 6)
#------- Cycle duration
cycle = 0.0096
# ------ Shift longitude of the orbit file if no pass is in the domain 
#        (in degree): Default value is None (no shift)
shift_lon = 0
# ------ Shift time of the satellite pass (in day):
#        Default value is None (no shift)
shift_time = None

.. _params-model:

# -----------------------#
# Model input parameters
# -----------------------#
# ------ List of model files:
#	 (The first file contains the grid and is not considered as model data)
#        To generate the noise alone, file_input=None and specify region 
#        in modelbox
file_input = os.path.join(indatadir, [your_list_of_file_name.txt]' or None
# ------ Type of model data:
#	 (Optional, default is NETCDF_MODEL and reads netcdf3 and netcdf4 files)
#	 (Other options are ROMS, NEMO and WW3 to read Nemo, roms or WW3)
model = 'WW3'
# ------ Type of grid: 
#        'regular' or 'irregular', if 'regular' only 1d coordinates 
#        are extracted from model       
grid = 'regular'
# ------ Specify velocities variable:
varu = 'ucur'
varv = 'vcur'
# ------ Specify factor to convert velocity values in m/s:
vel_factor = 1.
# ------ Specify longitude variable:
lonu = 'longitude'
lonv = 'longitude'
# ------ Specify latitude variable:
latu = 'latitude'
latv = 'latitude'
# ------ Specify number of time in file:
dim_time = (444, 744)
# ------ Time step between two model outputs (in days):
timestep = 1/24.
# ------ Number of outputs to consider:
#        (timestep*nstep=total number of days)
nstep = 1000.
# ------ Not a number value:
model_nan = -32767.

.. _params-output:

# -----------------------# 
# SKIM output files  
# -----------------------# 
# ------ Output file root name:
#	 (Final file name is root_name_c[cycle].nc
file_output = os.path.join(outdatadir, config)
# ------ Interpolation of the SSH from the model (if grid is irregular and 
#         pyresample is not installed:
#        (either 'linear' or 'nearest', use 'nearest' for large region
#        as it is faster and use less memory.)
interpolation = 'nearest' or 'linear'

.. _params-error:

# -----------------------# 
# SKIM error parameters 
# -----------------------# 
# ------- Instrument white noise error
instr = True
# ------- Instrument white noise rms 
rms_instr = [os.path.join(dir_setup, 'instrumentnoise_12.dat'),
             os.path.join(dir_setup, 'instrumentnoise_12.dat'),
             os.path.join(dir_setup, 'instrumentnoise_12.dat'),
             os.path.join(dir_setup, 'instrumentnoise_12.dat'),
             os.path.join(dir_setup, 'instrumentnoise_12.dat'),
             os.path.join(dir_setup, 'instrumentnoise_06.dat'),
             os.path.join(dir_setup, 'instrumentnoise_06.dat')]
# Multplication factor for instrument noise data to compensate for faster time
# cycle
rms_instr_factor = 2.5

# ------- Stoke drift velocity [beam 12, beam 6]
uss = True
# ------- Path to list of stoke drift files
input_uss = os.path.join(indatadir, 'list_file_uss.txt')
# ------- Stoke parameter
G = [50, 50, 50, 50, 50, 50, 50]
# ------- Use empirical parametrisation or compute uss bias using neighboring beams
formula = True or False
# ------- Set parameters for the empirical formula errwb = bias_std * std(uss) * errdcos / 20
bias_std = 0.09
errdcos = None if formula is False or list of coefficient if formula is True
# ------- Set footprint size in km to compute uss std
footprint_std = 0 if formula is False or around 400 if Formula is True

## -- Geophysical error
## ----------------------
# ------ Wet tropo error (True to compute it):
wet_tropo = True
# ------ Beam print size (in km):
#        Gaussian footprint of sigma km
sigma = 8.
